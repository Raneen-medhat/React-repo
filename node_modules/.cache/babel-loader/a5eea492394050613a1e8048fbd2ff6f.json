{"ast":null,"code":"import axios, { AxiosPromise, AxiosInstance } from 'axios';\nimport config from './config'; // import setupInterceptors from './../networking/intercepor';\n\nclass HTTPClient {\n  static fetch(url) {\n    return HTTPClient.client.get(url);\n  }\n\n  static post(url, payload) {\n    return HTTPClient.client.post(url, payload);\n  }\n\n  static put(url, payload) {\n    return HTTPClient.client.put(url, payload);\n  }\n\n  static delete(url) {\n    return HTTPClient.client.delete(url);\n  }\n\n}\n\nHTTPClient.client = axios.create({\n  baseURL: config.baseURL,\n  headers: config.headers,\n  responseType: 'json'\n});\naxios.interceptors.request.use(function (config) {\n  // spinning start to show\n  // UPDATE: Add this code to show global loading indicator\n  document.body.classList.add('loading-indicator');\n  const token = window.localStorage.token;\n\n  if (token) {\n    config.headers.Authorization = \"token \".concat(token);\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(function (response) {\n  // spinning hide\n  // UPDATE: Add this code to hide global loading indicator\n  document.body.classList.remove('loading-indicator');\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default HTTPClient;","map":{"version":3,"sources":["/var/www/html/Raneen/React/react-repo/src/services/networking/queries.js"],"names":["axios","AxiosPromise","AxiosInstance","config","HTTPClient","fetch","url","client","get","post","payload","put","delete","create","baseURL","headers","responseType","interceptors","request","use","document","body","classList","add","token","window","localStorage","Authorization","error","Promise","reject","response","remove"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,YAAhB,EAA8BC,aAA9B,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CACA;;AAEC,MAAMC,UAAN,CAAiB;AAQhB,SAAOC,KAAP,CAAaC,GAAb,EAAkB;AAChB,WAAOF,UAAU,CAACG,MAAX,CAAkBC,GAAlB,CAAsBF,GAAtB,CAAP;AACD;;AAED,SAAOG,IAAP,CAAYH,GAAZ,EAAiBI,OAAjB,EAA0B;AACxB,WAAON,UAAU,CAACG,MAAX,CAAkBE,IAAlB,CAAuBH,GAAvB,EAA4BI,OAA5B,CAAP;AACD;;AAEA,SAAOC,GAAP,CAAWL,GAAX,EAAgBI,OAAhB,EAAyB;AACxB,WAAON,UAAU,CAACG,MAAX,CAAkBI,GAAlB,CAAsBL,GAAtB,EAA2BI,OAA3B,CAAP;AACD;;AAEA,SAAOE,MAAP,CAAcN,GAAd,EAAmB;AAClB,WAAOF,UAAU,CAACG,MAAX,CAAkBK,MAAlB,CAAyBN,GAAzB,CAAP;AACD;;AAtBe;;AAAXF,U,CACGG,M,GAASP,KAAK,CAACa,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAEX,MAAM,CAACW,OADY;AAE5BC,EAAAA,OAAO,EAAEZ,MAAM,CAACY,OAFY;AAG5BC,EAAAA,YAAY,EAAE;AAHc,CAAb,C;AAwBnBhB,KAAK,CAACiB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAUhB,MAAV,EAAkB;AAE/C;AACA;AACAiB,EAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,mBAA5B;AAEA,QAAMC,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBF,KAAlC;;AACA,MAAIA,KAAJ,EAAW;AACRrB,IAAAA,MAAM,CAACY,OAAP,CAAeY,aAAf,mBAAwCH,KAAxC;AACF;;AACD,SAAOrB,MAAP;AACD,CAXD,EAWG,UAAUyB,KAAV,EAAiB;AAClB,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAbD;AAeA5B,KAAK,CAACiB,YAAN,CAAmBc,QAAnB,CAA4BZ,GAA5B,CAAgC,UAAUY,QAAV,EAAoB;AAElD;AACA;AACAX,EAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBU,MAAxB,CAA+B,mBAA/B;AAEA,SAAOD,QAAP;AACD,CAPD,EAOG,UAAUH,KAAV,EAAiB;AAClB,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CATD;AAWA,eAAexB,UAAf","sourcesContent":["import axios, { AxiosPromise, AxiosInstance } from 'axios';\nimport config from './config';\n// import setupInterceptors from './../networking/intercepor';\n\n class HTTPClient {\n   static client = axios.create({\n    baseURL: config.baseURL,\n    headers: config.headers,\n    responseType: 'json'\n  });\n\n\n  static fetch(url) {\n    return HTTPClient.client.get(url);\n  }\n\n  static post(url, payload) {\n    return HTTPClient.client.post(url, payload);\n  }\n\n   static put(url, payload) {\n    return HTTPClient.client.put(url, payload);\n  }\n\n   static delete(url) {\n    return HTTPClient.client.delete(url);\n  }\n}\n\naxios.interceptors.request.use(function (config) {\n\n  // spinning start to show\n  // UPDATE: Add this code to show global loading indicator\n  document.body.classList.add('loading-indicator');\n\n  const token = window.localStorage.token;\n  if (token) {\n     config.headers.Authorization = `token ${token}`\n  }\n  return config\n}, function (error) {\n  return Promise.reject(error);\n});\n\naxios.interceptors.response.use(function (response) {\n\n  // spinning hide\n  // UPDATE: Add this code to hide global loading indicator\n  document.body.classList.remove('loading-indicator');\n\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});\n\nexport default HTTPClient;"]},"metadata":{},"sourceType":"module"}