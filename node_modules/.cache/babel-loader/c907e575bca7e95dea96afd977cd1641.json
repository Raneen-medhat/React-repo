{"ast":null,"code":"import _defineProperty from \"/var/www/html/Raneen/React/react-repo/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_DATA, FETCH_PRODUCTS_PENDING, FETCH_PRODUCTS_SUCCESS, FETCH_PRODUCTS_ERROR } from './../actions/types';\nconst initialState = {\n  pending: false,\n  products: [],\n  error: null\n};\n\nconst asyncReducer = (state = initialState, action) => {\n  return state;\n};\n\nconst getDataReducer = (state, action) => {\n  switch (action.type) {\n    case GET_DATA:\n      return _objectSpread({}, state, {\n        data: action.payload\n      });\n      break;\n\n    default:\n      // the dispatched action is not in this reducer, return the state unchanged\n      return state;\n  }\n};\n\nexport function productsReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_PRODUCTS_PENDING:\n      return _objectSpread({}, state, {\n        pending: true\n      });\n\n    case FETCH_PRODUCTS_SUCCESS:\n      return _objectSpread({}, state, {\n        pending: false,\n        products: action.payload\n      });\n\n    case FETCH_PRODUCTS_ERROR:\n      return _objectSpread({}, state, {\n        pending: false,\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n}\nexport const getProducts = state => state.products;\nexport const getProductsPending = state => state.pending;\nexport const getProductsError = state => state.error;\nexport default asyncReducer;","map":{"version":3,"sources":["/var/www/html/Raneen/React/react-repo/src/services/redux/reducers/index.js"],"names":["GET_DATA","FETCH_PRODUCTS_PENDING","FETCH_PRODUCTS_SUCCESS","FETCH_PRODUCTS_ERROR","initialState","pending","products","error","asyncReducer","state","action","getDataReducer","type","data","payload","productsReducer","getProducts","getProductsPending","getProductsError"],"mappings":";;;;;;AAAA,SAAQA,QAAR,EAAkBC,sBAAlB,EAA0CC,sBAA1C,EAAkEC,oBAAlE,QAA6F,oBAA7F;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAME,MAAMC,YAAY,GAAG,CAAEC,KAAK,GAAGL,YAAV,EAAyBM,MAAzB,KAAoC;AACvD,SAAOD,KAAP;AACD,CAFD;;AAKA,MAAME,cAAc,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAOA,MAAM,CAACE,IAAd;AACI,SAAKZ,QAAL;AACI,+BACOS,KADP;AAEII,QAAAA,IAAI,EAAEH,MAAM,CAACI;AAFjB;AAIJ;;AAEA;AACI;AACA,aAAOL,KAAP;AAVR;AAYD,CAbD;;AAgBA,OAAO,SAASM,eAAT,CAAyBN,KAAK,GAAGL,YAAjC,EAA+CM,MAA/C,EAAuD;AAC5D,UAAOA,MAAM,CAACE,IAAd;AACI,SAAKX,sBAAL;AACI,+BACOQ,KADP;AAEIJ,QAAAA,OAAO,EAAE;AAFb;;AAIJ,SAAKH,sBAAL;AACI,+BACOO,KADP;AAEIJ,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,QAAQ,EAAEI,MAAM,CAACI;AAHrB;;AAKJ,SAAKX,oBAAL;AACI,+BACOM,KADP;AAEIJ,QAAAA,OAAO,EAAE,KAFb;AAGIE,QAAAA,KAAK,EAAEG,MAAM,CAACH;AAHlB;;AAKJ;AACI,aAAOE,KAAP;AAnBR;AAqBH;AAED,OAAO,MAAMO,WAAW,GAAGP,KAAK,IAAIA,KAAK,CAACH,QAAnC;AACP,OAAO,MAAMW,kBAAkB,GAAGR,KAAK,IAAIA,KAAK,CAACJ,OAA1C;AACP,OAAO,MAAMa,gBAAgB,GAAGT,KAAK,IAAIA,KAAK,CAACF,KAAxC;AAIL,eAAeC,YAAf","sourcesContent":["import {GET_DATA ,FETCH_PRODUCTS_PENDING, FETCH_PRODUCTS_SUCCESS, FETCH_PRODUCTS_ERROR} from './../actions/types';\n\n\nconst initialState = {\n  pending: false,\n  products: [],\n  error: null\n  };\n  \n  const asyncReducer = ( state = initialState , action) => {\n    return state;\n  };\n\n\n  const getDataReducer = (state, action) => {\n    switch(action.type) {\n        case GET_DATA:\n            return {\n                ...state,\n                data: action.payload\n            }\n        break;\n\n        default:\n            // the dispatched action is not in this reducer, return the state unchanged\n            return state;\n    }\n  }\n\n  \n  export function productsReducer(state = initialState, action) {\n    switch(action.type) {\n        case FETCH_PRODUCTS_PENDING: \n            return {\n                ...state,\n                pending: true\n            }\n        case FETCH_PRODUCTS_SUCCESS:\n            return {\n                ...state,\n                pending: false,\n                products: action.payload\n            }\n        case FETCH_PRODUCTS_ERROR:\n            return {\n                ...state,\n                pending: false,\n                error: action.error\n            }\n        default: \n            return state;\n    }\n}\n\nexport const getProducts = state => state.products;\nexport const getProductsPending = state => state.pending;\nexport const getProductsError = state => state.error;\n\n\n  \n  export default asyncReducer;"]},"metadata":{},"sourceType":"module"}