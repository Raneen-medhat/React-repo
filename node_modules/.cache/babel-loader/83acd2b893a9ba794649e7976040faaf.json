{"ast":null,"code":"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport fetchProducts from './../App/fetchProducts';\nimport { getProductsError, getProducts, getProductsPending } from './../../services/redux/reducers'; // import LoadingSpinner from './SomeLoadingSpinner';\n// import ProductList from './ProductList';\n\nclass ProductView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {// console.log(props)\n    };\n\n    this.shouldComponentRender = this.shouldComponentRender.bind(this);\n  }\n\n  componentWillMount() {\n    const fetchProducts = this.props.fetchProducts;\n    fetchProducts();\n  }\n\n  shouldComponentRender() {\n    const pending = this.props.pending;\n    if (this.pending === false) return false; // more tests\n\n    return true;\n  } // render() {\n  //     const {products, error, pending} = this.props;\n  //     // if(!this.shouldComponentRender()) return <LoadingSpinner />\n  //     return (\n  //         <div className='product-list-wrapper'>\n  //             {error && <span className='product-list-error'>{error}</span>}\n  //             <ProductList products={products} />\n  //         </div>\n  //     )\n  // }\n\n\n}\n\nconst mapStateToProps = state => ({\n  error: getProductsError(state),\n  products: getProducts(state),\n  pending: getProductsPending(state)\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  fetchProducts: fetchProductsAction\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductView);","map":{"version":3,"sources":["/var/www/html/Raneen/React/react-repo/src/components/ProductView/ProductView.js"],"names":["React","Component","connect","bindActionCreators","fetchProducts","getProductsError","getProducts","getProductsPending","ProductView","constructor","props","componentDidMount","shouldComponentRender","bind","componentWillMount","pending","mapStateToProps","state","error","products","mapDispatchToProps","dispatch","fetchProductsAction"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AAEA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,SAAQC,gBAAR,EAA0BC,WAA1B,EAAuCC,kBAAvC,QAAgE,iCAAhE,C,CAEA;AACA;;AAEA,MAAMC,WAAN,SAA0BP,SAA1B,CAAoC;AAChCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,iBAVmB,GAUC,MAAM,CACtB;AACH,KAZkB;;AAGf,SAAKC,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAA7B;AACH;;AAEDC,EAAAA,kBAAkB,GAAG;AAAA,UACVV,aADU,GACO,KAAKM,KADZ,CACVN,aADU;AAEjBA,IAAAA,aAAa;AAChB;;AAKDQ,EAAAA,qBAAqB,GAAG;AAAA,UACbG,OADa,GACF,KAAKL,KADH,CACbK,OADa;AAEpB,QAAG,KAAKA,OAAL,KAAiB,KAApB,EAA2B,OAAO,KAAP,CAFP,CAGpB;;AACA,WAAO,IAAP;AACH,GApB+B,CAsBhC;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjCgC;;AAqCpC,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,KAAK,EAAEb,gBAAgB,CAACY,KAAD,CADO;AAE9BE,EAAAA,QAAQ,EAAEb,WAAW,CAACW,KAAD,CAFS;AAG9BF,EAAAA,OAAO,EAAER,kBAAkB,CAACU,KAAD;AAHG,CAAL,CAA7B;;AAMA,MAAMG,kBAAkB,GAAGC,QAAQ,IAAIlB,kBAAkB,CAAC;AACtDC,EAAAA,aAAa,EAAEkB;AADuC,CAAD,EAEtDD,QAFsD,CAAzD;;AAIA,eAAenB,OAAO,CAClBc,eADkB,EAElBI,kBAFkB,CAAP,CAGbZ,WAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport fetchProducts from './../App/fetchProducts';\nimport {getProductsError, getProducts, getProductsPending} from './../../services/redux/reducers';\n\n// import LoadingSpinner from './SomeLoadingSpinner';\n// import ProductList from './ProductList';\n\nclass ProductView extends Component {\n    constructor(props) {\n        super(props);\n\n        this.shouldComponentRender = this.shouldComponentRender.bind(this);\n    }\n\n    componentWillMount() {\n        const {fetchProducts} = this.props;\n        fetchProducts();\n    }\n    componentDidMount = () => {\n        // console.log(props)\n    }\n\n    shouldComponentRender() {\n        const {pending} = this.props;\n        if(this.pending === false) return false;\n        // more tests\n        return true;\n    }\n\n    // render() {\n    //     const {products, error, pending} = this.props;\n\n    //     // if(!this.shouldComponentRender()) return <LoadingSpinner />\n\n    //     return (\n    //         <div className='product-list-wrapper'>\n    //             {error && <span className='product-list-error'>{error}</span>}\n    //             <ProductList products={products} />\n    //         </div>\n    //     )\n    // }\n}\n\n\nconst mapStateToProps = state => ({\n    error: getProductsError(state),\n    products: getProducts(state),\n    pending: getProductsPending(state)\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    fetchProducts: fetchProductsAction\n}, dispatch)\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProductView );\n"]},"metadata":{},"sourceType":"module"}