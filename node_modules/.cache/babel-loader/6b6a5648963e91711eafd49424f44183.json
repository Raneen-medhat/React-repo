{"ast":null,"code":"import _defineProperty from \"/var/www/html/Raneen/React/react-repo/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\n\nconst setupInterceptors = store => {\n  console.log('from intercept', store); //   axios.interceptors.request.use( (config) => {\n  //     console.log('config' , config)\n  //     response => successHandler(response),\n  //     error => errorHandler(error)\n  //   }\n  //  );\n\n  axios.interceptors.response.use(async response => {\n    console.log(\"response\", response);\n    return response;\n  }, async error => {\n    const originalRequest = error.config;\n    const serverCallUrl = new URL(originalRequest.url);\n    const status = error.response.status;\n    console.log(\"originalRequest\", originalRequest);\n\n    if ((status === 401 || status === 403) && !originalRequest._retry && !serverCallUrl.pathname.includes('/auth')) {\n      return axios(originalRequest);\n    }\n\n    return Promise.reject(error);\n  });\n};\n\nconst errorHandler = error => {\n  // Handle errors\n  console.log('from errorHandler');\n  return Promise.reject(_objectSpread({}, error));\n};\n\nconst successHandler = response => {\n  console.log('from successHandler'); // Handle responses\n\n  return response;\n};\n\nexport default setupInterceptors;","map":{"version":3,"sources":["/var/www/html/Raneen/React/react-repo/src/services/networking/intercepor.js"],"names":["axios","setupInterceptors","store","console","log","interceptors","response","use","error","originalRequest","config","serverCallUrl","URL","url","status","_retry","pathname","includes","Promise","reject","errorHandler","successHandler"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,KAA9B,EADqC,CAGnC;AACA;AACA;AACA;AACA;AACA;;AACAF,EAAAA,KAAK,CAACK,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACE,MAAOD,QAAP,IAAoB;AAClBH,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAyBE,QAAzB;AAEA,WAAOA,QAAP;AAAiB,GAJrB,EAKE,MAAOE,KAAP,IAAiB;AACf,UAAMC,eAAe,GAAGD,KAAK,CAACE,MAA9B;AACA,UAAMC,aAAa,GAAG,IAAIC,GAAJ,CAAQH,eAAe,CAACI,GAAxB,CAAtB;AACA,UAAMC,MAAM,GAAGN,KAAK,CAACF,QAAN,CAAeQ,MAA9B;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAAgCK,eAAhC;;AACA,QACE,CAACK,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAA9B,KACA,CAACL,eAAe,CAACM,MADjB,IAEA,CAACJ,aAAa,CAACK,QAAd,CAAuBC,QAAvB,CAAgC,OAAhC,CAHH,EAIE;AAGA,aAAOjB,KAAK,CAACS,eAAD,CAAZ;AACD;;AAED,WAAOS,OAAO,CAACC,MAAR,CAAeX,KAAf,CAAP;AACD,GArBH;AAuBC,CAhCH;;AAiCE,MAAMY,YAAY,GAAIZ,KAAD,IAAW;AAC5B;AACFL,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AAEE,SAAOc,OAAO,CAACC,MAAR,mBAAoBX,KAApB,EAAP;AACH,CALD;;AAOA,MAAMa,cAAc,GAAIf,QAAD,IAAc;AACnCH,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EADmC,CAGjC;;AACA,SAAOE,QAAP;AACH,CALD;;AAOA,eAAeL,iBAAf","sourcesContent":["import axios from 'axios';\n\nconst setupInterceptors = (store) => {\nconsole.log('from intercept', store)\n\n  //   axios.interceptors.request.use( (config) => {\n  //     console.log('config' , config)\n  //     response => successHandler(response),\n  //     error => errorHandler(error)\n  //   }\n  //  );\n  axios.interceptors.response.use(\n    async (response) => { \n      console.log(\"response\" , response)\n      \n      return response },\n    async (error) => {\n      const originalRequest = error.config\n      const serverCallUrl = new URL(originalRequest.url)\n      const status = error.response.status\n      console.log(\"originalRequest\" , originalRequest)\n      if (\n        (status === 401 || status === 403) &&\n        !originalRequest._retry &&\n        !serverCallUrl.pathname.includes('/auth')\n      ) {\n\n  \n        return axios(originalRequest)\n      }\n  \n      return Promise.reject(error)\n    })\n\n  }\n  const errorHandler = (error) => {\n      // Handle errors\n    console.log('from errorHandler')\n\n      return Promise.reject({ ...error })\n  }\n  \n  const successHandler = (response) => {\n    console.log('from successHandler')\n\n      // Handle responses\n      return response\n  }\n\n  export default setupInterceptors;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}